// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::once_cell::sync::Lazy;
#[allow(unused_imports)]
use parol_runtime::parser::{LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production, Trans};
use parol_runtime::{ParolError, ParseTree, TerminalIndex};
use parol_runtime::{ScannerConfig, TokenStream, Tokenizer};
use std::path::Path;

use crate::wiki_grammar::WikiGrammar;
use crate::wiki_grammar_trait::WikiGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 15] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r"\{\|",
    /*  6 */ r"\|\}",
    /*  7 */ r"\[\[",
    /*  8 */ r"\]\]",
    /*  9 */ r"\{\{",
    /* 10 */ r"\}\}",
    /* 11 */ r"\|",
    /* 12 */ r"[^(\|\})(\{\|)]*",
    /* 13 */ r"(\.|[^\[\]\{\}\|])*",
    /* 14 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 15] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "LCurlyPipe",
    /*  6 */ "RCurlyPipe",
    /*  7 */ "LSquare",
    /*  8 */ "RSquare",
    /*  9 */ "LCurly",
    /* 10 */ "RCurly",
    /* 11 */ "Pipe",
    /* 12 */ "RawString",
    /* 13 */ "String",
    /* 14 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[TerminalIndex; 8]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r"(//.*(\r\n|\r|\n|$))",
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* LCurlyPipe */
        6,  /* RCurlyPipe */
        7,  /* LSquare */
        8,  /* RSquare */
        9,  /* LCurly */
        10, /* RCurly */
        11, /* Pipe */
        13, /* String */
    ],
);

/* SCANNER_1: "ForRawString" */
const SCANNER_1: (&[&str; 5], &[TerminalIndex; 1]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[12 /* RawString */],
);

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 20] = &[
    /*  0 */ "Attribute",
    /*  1 */ "Attribute2",
    /*  2 */ "Attribute2List",
    /*  3 */ "Attribute2ListGroup",
    /*  4 */ "AttributeList",
    /*  5 */ "LCurly",
    /*  6 */ "LCurlyPipe",
    /*  7 */ "LSquare",
    /*  8 */ "Link",
    /*  9 */ "LinkList",
    /* 10 */ "Pipe",
    /* 11 */ "RCurly",
    /* 12 */ "RCurlyPipe",
    /* 13 */ "RSquare",
    /* 14 */ "RawString",
    /* 15 */ "String",
    /* 16 */ "Value",
    /* 17 */ "ValueList",
    /* 18 */ "ValueListGroup",
    /* 19 */ "Wiki",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 20] = &[
    /* 0 - "Attribute" */
    LookaheadDFA {
        prod0: 4,
        transitions: &[],
        k: 0,
    },
    /* 1 - "Attribute2" */
    LookaheadDFA {
        prod0: 7,
        transitions: &[],
        k: 0,
    },
    /* 2 - "Attribute2List" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 6, 2, 16),
            Trans(0, 7, 1, 8),
            Trans(0, 8, 1, 8),
            Trans(0, 9, 1, 8),
            Trans(0, 10, 1, 8),
            Trans(0, 11, 1, 8),
            Trans(0, 12, 1, 8),
            Trans(0, 13, 1, 8),
        ],
        k: 1,
    },
    /* 3 - "Attribute2ListGroup" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 7, 6, 14),
            Trans(0, 8, 7, 15),
            Trans(0, 9, 4, 12),
            Trans(0, 10, 5, 13),
            Trans(0, 11, 2, 10),
            Trans(0, 12, 1, 9),
            Trans(0, 13, 3, 11),
        ],
        k: 1,
    },
    /* 4 - "AttributeList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 10, 2, 6), Trans(0, 11, 1, 5)],
        k: 1,
    },
    /* 5 - "LCurly" */
    LookaheadDFA {
        prod0: 21,
        transitions: &[],
        k: 0,
    },
    /* 6 - "LCurlyPipe" */
    LookaheadDFA {
        prod0: 17,
        transitions: &[],
        k: 0,
    },
    /* 7 - "LSquare" */
    LookaheadDFA {
        prod0: 19,
        transitions: &[],
        k: 0,
    },
    /* 8 - "Link" */
    LookaheadDFA {
        prod0: 1,
        transitions: &[],
        k: 0,
    },
    /* 9 - "LinkList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[Trans(0, 8, 2, 3), Trans(0, 11, 1, 2)],
        k: 1,
    },
    /* 10 - "Pipe" */
    LookaheadDFA {
        prod0: 23,
        transitions: &[],
        k: 0,
    },
    /* 11 - "RCurly" */
    LookaheadDFA {
        prod0: 22,
        transitions: &[],
        k: 0,
    },
    /* 12 - "RCurlyPipe" */
    LookaheadDFA {
        prod0: 18,
        transitions: &[],
        k: 0,
    },
    /* 13 - "RSquare" */
    LookaheadDFA {
        prod0: 20,
        transitions: &[],
        k: 0,
    },
    /* 14 - "RawString" */
    LookaheadDFA {
        prod0: 24,
        transitions: &[],
        k: 0,
    },
    /* 15 - "String" */
    LookaheadDFA {
        prod0: 25,
        transitions: &[],
        k: 0,
    },
    /* 16 - "Value" */
    LookaheadDFA {
        prod0: 26,
        transitions: &[],
        k: 0,
    },
    /* 17 - "ValueList" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 0, 2, 32),
            Trans(0, 5, 1, 27),
            Trans(0, 7, 1, 27),
            Trans(0, 8, 2, 32),
            Trans(0, 9, 1, 27),
            Trans(0, 10, 2, 32),
            Trans(0, 11, 2, 32),
            Trans(0, 13, 1, 27),
        ],
        k: 1,
    },
    /* 18 - "ValueListGroup" */
    LookaheadDFA {
        prod0: -1,
        transitions: &[
            Trans(0, 5, 3, 30),
            Trans(0, 7, 1, 28),
            Trans(0, 9, 2, 29),
            Trans(0, 13, 4, 31),
        ],
        k: 1,
    },
    /* 19 - "Wiki" */
    LookaheadDFA {
        prod0: 0,
        transitions: &[],
        k: 0,
    },
];

pub const PRODUCTIONS: &[Production; 33] = &[
    // 0 - Wiki: Value;
    Production {
        lhs: 19,
        production: &[ParseType::N(16)],
    },
    // 1 - Link: LSquare String LinkList /* Vec */ RSquare;
    Production {
        lhs: 8,
        production: &[
            ParseType::N(13),
            ParseType::N(9),
            ParseType::N(15),
            ParseType::N(7),
        ],
    },
    // 2 - LinkList: Pipe Value LinkList;
    Production {
        lhs: 9,
        production: &[ParseType::N(9), ParseType::N(16), ParseType::N(10)],
    },
    // 3 - LinkList: ;
    Production {
        lhs: 9,
        production: &[],
    },
    // 4 - Attribute: LCurly String AttributeList /* Vec */ RCurly;
    Production {
        lhs: 0,
        production: &[
            ParseType::N(11),
            ParseType::N(4),
            ParseType::N(15),
            ParseType::N(5),
        ],
    },
    // 5 - AttributeList: Pipe Value AttributeList;
    Production {
        lhs: 4,
        production: &[ParseType::N(4), ParseType::N(16), ParseType::N(10)],
    },
    // 6 - AttributeList: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 7 - Attribute2: LCurlyPipe Attribute2List /* Vec */ RCurlyPipe;
    Production {
        lhs: 1,
        production: &[ParseType::N(12), ParseType::N(2), ParseType::N(6)],
    },
    // 8 - Attribute2List: Attribute2ListGroup Attribute2List;
    Production {
        lhs: 2,
        production: &[ParseType::N(2), ParseType::N(3)],
    },
    // 9 - Attribute2ListGroup: RawString;
    Production {
        lhs: 3,
        production: &[ParseType::N(14)],
    },
    // 10 - Attribute2ListGroup: Pipe;
    Production {
        lhs: 3,
        production: &[ParseType::N(10)],
    },
    // 11 - Attribute2ListGroup: String;
    Production {
        lhs: 3,
        production: &[ParseType::N(15)],
    },
    // 12 - Attribute2ListGroup: LCurly;
    Production {
        lhs: 3,
        production: &[ParseType::N(5)],
    },
    // 13 - Attribute2ListGroup: RCurly;
    Production {
        lhs: 3,
        production: &[ParseType::N(11)],
    },
    // 14 - Attribute2ListGroup: LSquare;
    Production {
        lhs: 3,
        production: &[ParseType::N(7)],
    },
    // 15 - Attribute2ListGroup: RSquare;
    Production {
        lhs: 3,
        production: &[ParseType::N(13)],
    },
    // 16 - Attribute2List: ;
    Production {
        lhs: 2,
        production: &[],
    },
    // 17 - LCurlyPipe: '{|';
    Production {
        lhs: 6,
        production: &[ParseType::T(5)],
    },
    // 18 - RCurlyPipe: '|}';
    Production {
        lhs: 12,
        production: &[ParseType::T(6)],
    },
    // 19 - LSquare: '[[';
    Production {
        lhs: 7,
        production: &[ParseType::T(7)],
    },
    // 20 - RSquare: ']]';
    Production {
        lhs: 13,
        production: &[ParseType::T(8)],
    },
    // 21 - LCurly: '{{';
    Production {
        lhs: 5,
        production: &[ParseType::T(9)],
    },
    // 22 - RCurly: '}}';
    Production {
        lhs: 11,
        production: &[ParseType::T(10)],
    },
    // 23 - Pipe: '|';
    Production {
        lhs: 10,
        production: &[ParseType::T(11)],
    },
    // 24 - RawString: /[^(\|\})(\{\|)]*/;
    Production {
        lhs: 14,
        production: &[ParseType::T(12)],
    },
    // 25 - String: /(\.|[^\[\]\{\}\|])*/;
    Production {
        lhs: 15,
        production: &[ParseType::T(13)],
    },
    // 26 - Value: ValueList /* Vec */;
    Production {
        lhs: 16,
        production: &[ParseType::N(17)],
    },
    // 27 - ValueList: ValueListGroup ValueList;
    Production {
        lhs: 17,
        production: &[ParseType::N(17), ParseType::N(18)],
    },
    // 28 - ValueListGroup: Link;
    Production {
        lhs: 18,
        production: &[ParseType::N(8)],
    },
    // 29 - ValueListGroup: Attribute;
    Production {
        lhs: 18,
        production: &[ParseType::N(0)],
    },
    // 30 - ValueListGroup: Attribute2;
    Production {
        lhs: 18,
        production: &[ParseType::N(1)],
    },
    // 31 - ValueListGroup: String;
    Production {
        lhs: 18,
        production: &[ParseType::N(15)],
    },
    // 32 - ValueList: ;
    Production {
        lhs: 17,
        production: &[],
    },
];

static SCANNERS: Lazy<Vec<ScannerConfig>> = Lazy::new(|| {
    vec![
        ScannerConfig::new(
            "INITIAL",
            Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
            &[],
        ),
        ScannerConfig::new(
            "ForRawString",
            Tokenizer::build(TERMINALS, SCANNER_1.0, SCANNER_1.1).unwrap(),
            &[],
        ),
    ]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut WikiGrammar<'t>,
) -> Result<ParseTree<'t>, ParolError>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        19,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    llk_parser.trim_parse_tree();

    // Initialize wrapper
    let mut user_actions = WikiGrammarAuto::new(user_actions);
    llk_parser.parse(
        TokenStream::new(input, file_name, &SCANNERS, MAX_K).unwrap(),
        &mut user_actions,
    )
}
